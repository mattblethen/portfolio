---
// src/components/Img.astro
// Accepts: string URLs OR imported image objects from Astro/Vite/MDX.
//
// This component aggressively normalizes `src` so you never see `[object Object]`.

export interface Props {
  src: any;
  alt: string;
  width?: number | string;
  height?: number | string;
  loading?: "lazy" | "eager";
  decoding?: "auto" | "sync" | "async";
  fetchpriority?: "auto" | "high" | "low";
  class?: string;
  style?: string;
}

const {
  src,
  alt,
  width,
  height,
  loading = "lazy",
  decoding = "async",
  fetchpriority = "auto",
  class: className,
  style,
} = Astro.props as Props;

// Robust URL coercion that handles many import shapes
function coerceUrl(v: any): string {
  if (!v) return "";
  if (typeof v === "string") return v;

  // Common Astro/Vite asset shapes:
  // 1) { src: "/_astro/..webp", width, height, format }
  if (v.src) {
    if (typeof v.src === "string") return v.src;
    // Sometimes src can be a URL-like object with toString()
    if (v.src && typeof v.src.toString === "function") return v.src.toString();
  }

  // 2) default export string
  if (typeof v.default === "string") return v.default;

  // 3) URL-like top-level object
  if (typeof v.toString === "function" && v.toString() !== "[object Object]") {
    return v.toString();
  }

  // Last resort: JSON-stringify to avoid literal [object Object]
  try { return JSON.stringify(v); } catch { return String(v); }
}

// Prefer explicit width/height props; otherwise borrow from the import (if present)
function dim(v: any, key: "width" | "height", explicit?: number | string) {
  if (typeof explicit !== "undefined") return explicit;
  const n = v && typeof v[key] === "number" ? v[key] : undefined;
  return n;
}

const finalSrc = coerceUrl(src);
const finalWidth = dim(src, "width", width);
const finalHeight = dim(src, "height", height);
---

<img
  src={finalSrc}
  alt={alt}
  {...(finalWidth ? { width: finalWidth } : {})}
  {...(finalHeight ? { height: finalHeight } : {})}
  loading={loading}
  decoding={decoding}
  fetchpriority={fetchpriority}
  class={className}
  style={style}
/>

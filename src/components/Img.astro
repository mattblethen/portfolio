---
// src/components/Img.astro
// Safe passthrough <img> that accepts either a string URL or an imported asset object.

interface Props {
  src: string | { src: string } | undefined | null;
  alt?: string;
  width?: string | number;
  height?: string | number;
  sizes?: string;
  loading?: 'lazy' | 'eager';
  decoding?: 'auto' | 'sync' | 'async';
  fetchpriority?: 'high' | 'low' | 'auto';
  class?: string;
  style?: string;
}

const props = Astro.props as Props;

// Normalize src: allow string or asset object with { src }
let srcUrl: string | undefined;
if (typeof props.src === 'string') {
  srcUrl = props.src;
} else if (props.src && typeof props.src === 'object' && 'src' in props.src) {
  srcUrl = (props.src as { src: string }).src;
}

// Bail if no usable src
if (!srcUrl) {
  // Render nothing to avoid broken <img>
}
---

{srcUrl ? (
  <img
    src={srcUrl}
    alt={props.alt ?? ''}
    {...(props.width ? { width: props.width } : {})}
    {...(props.height ? { height: props.height } : {})}
    {...(props.sizes ? { sizes: props.sizes } : {})}
    {...(props.loading ? { loading: props.loading } : {})}
    {...(props.decoding ? { decoding: props.decoding } : {})}
    {...(props.fetchpriority ? { fetchpriority: props.fetchpriority } : {})}
    {...(props.class ? { class: props.class } : {})}
    {...(props.style ? { style: props.style } : {})}
  />
) : null}

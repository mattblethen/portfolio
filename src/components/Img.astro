---
import { Image } from "astro:assets";

/**
 * Props:
 * - src: static import (recommended) OR string path from /public
 * - alt: string
 * - width, height: numbers for fixed-size image (CLS-safe)
 * - widths: number[] for responsive srcset (alternative to width/height)
 * - sizes: responsive sizes string
 * - format: "avif" | "webp" | "png" | "jpeg" (optional)
 * - quality, fit, position: transform options
 * - class, style, loading, decoding: standard attrs
 */


const {
  src, alt = '',
  widths = [600, 900, 1200, 1600],
  sizes = '100vw',
  format = ['webp'],
  quality = 68,           // keep default modest
  loading = 'lazy',
  decoding = 'async',
  fetchpriority,          // <â€” add this
  class: className,
  style,
  width, height, fit, position
} = Astro.props;



const isStringSrc = typeof src === "string";
---

{isStringSrc ? (
  /* For /public paths or external URLs (no build-time optimization) */
  <img
    src={src}
    alt={alt}
    width={width}
    height={height}
    class={className}
    loading={loading}
    decoding={decoding}
    style={style}
  />
) : widths ? (
  /* Responsive, optimized output with srcset */
  <Image
    src={src}
    alt={alt}
    widths={widths}
    sizes={sizes}
    loading={loading}
    decoding={decoding}
    format={format}
    quality={quality}
    fit={fit}
    position={position}
    class={className}
    style={style}
  />
) : (
  /* Fixed-size, optimized output (CLS-safe) */
  <Image
    src={src}
    alt={alt}
    width={width}
    height={height}
    sizes={sizes}
    loading={loading}
    decoding={decoding}
    format={format}
    quality={quality}
    fit={fit}
    position={position}
    class={className}
    style={style}
  />
)}

---
import Base from "../../layouts/Base.astro";
import { getCollection, render } from "astro:content";
import Img from "../../components/Img.astro";

// Build all project pages at build time
export async function getStaticPaths() {
  const projects = await getCollection("projects");
  return projects.map((p) => ({
    params: { slug: p.slug },
    props: { entry: p },
  }));
}

const { entry } = Astro.props;
const { Content } = await render(entry);

// Frontmatter fields
const {
  title,
  summary,
  hero,
  client,
  date,
  tags = [],
  services = [],
  tech = [],
  links = {},
  metrics = [],
  testimonial = null,
} = entry.data as {
  title: string;
  summary?: string;
  hero?: string;  // legacy public path ok
  client?: string;
  date?: string | Date;
  tags?: string[];
  services?: string[];
  tech?: string[];
  links?: { live?: string };
  metrics?: string[];
  testimonial?: {
    name?: string;
    title?: string;
    photo?: string;
    quote?: string;
    rating?: number;
  } | null;
};

// Resolve assets whether they live in /public/images or /src/assets/images
const assetUrls = import.meta.glob("../../assets/images/**/*", {
  eager: true,
  import: "default",
}) as Record<string, string>;

function resolveAssetUrl(input?: string): string | undefined {
  if (!input) return undefined;
  if (/^https?:\/\//i.test(input)) return input; // absolute
  if (input.startsWith("/images/")) {
    const key = "../../assets" + input; // -> ../../assets/images/...
    return assetUrls[key] ?? input;     // fall back to public path
  }
  return input;
}

const heroUrl = resolveAssetUrl(hero);
const testimonialPhotoUrl = resolveAssetUrl(testimonial?.photo);

// Detect design-style projects (print/graphic)
const t = tags.map((x) => x.toLowerCase());
const isDesign = t.includes("design") || t.includes("graphic") || t.includes("print");

// Eyebrow text
const eyebrow = isDesign
  ? "Graphic Design ‚Ä¢ Print"
  : (tech.length ? tech.slice(0, 3).join(" ‚Ä¢ ") : (tags[0] ?? "Case Study"));

// Site URL helpers for absolute schema URLs
const siteOrigin = Astro.site ? (Astro.site as URL).origin : "https://mattblethen.com";
const projectUrl = `${siteOrigin}/projects/${entry.slug}/`;

// Ensure absolute image URL for structured data
function toAbsolute(u: unknown) {
  if (!u) return undefined;
  if (typeof u === "object" && u !== null && "src" in (u as any)) u = (u as any).src;
  const s = String(u);
  if (/^https?:\/\//i.test(s)) return s;
  return `${siteOrigin}${s.startsWith("/") ? s : `/${s}`}`;
}
const heroAbs = toAbsolute(heroUrl);

// Safely derive year
let year: string | null = null;
if (date) {
  const d = new Date(date as any);
  if (!isNaN(d.getTime())) year = String(d.getFullYear());
}

// JSON-LD for this project
const projectSchema = {
  "@context": "https://schema.org",
  "@type": "CreativeWork",
  name: title,
  headline: title,
  description: summary ?? "Project case study by Matt Blethen",
  image: heroAbs ?? undefined,
  datePublished: date ? new Date(date as any).toISOString().slice(0, 10) : undefined,
  url: projectUrl,
  creator: { "@type": "Person", name: "Matt Blethen", url: siteOrigin },
  keywords: tags,
  ...(client ? { producer: { "@type": "Organization", name: client } } : {}),
};

// Optional Review schema if testimonial exists
const reviewSchema = testimonial?.quote
  ? {
      "@context": "https://schema.org",
      "@type": "Review",
      itemReviewed: { "@type": "CreativeWork", name: title, url: projectUrl },
      reviewBody: testimonial.quote,
      author: {
        "@type": "Person",
        name: testimonial.name ?? "Client",
        ...(testimonial.title ? { jobTitle: testimonial.title } : {}),
      },
      ...(testimonial.rating
        ? { reviewRating: { "@type": "Rating", ratingValue: String(testimonial.rating), bestRating: "5", worstRating: "1" } }
        : {}),
    }
  : null;

// Breadcrumbs
const crumbs: Array<{ name: string; url?: string }> = [
  { name: "Home", url: `${siteOrigin}/` },
  { name: "Projects", url: `${siteOrigin}/#projects` },
  { name: title, url: projectUrl },
];

// Structured data array
const structuredData = reviewSchema ? [projectSchema, reviewSchema] : [projectSchema];
---

<Base
  title={title}
  description={summary ?? "Project case study"}
  image={heroUrl ?? "/images/og-default.jpg"}
  breadcrumbs={crumbs}
  structuredData={structuredData}
>
  <style>
    /* Layout-only tweaks (keep your visual theme in global.css as you prefer) */
    .project-grid {
      display: grid;
      grid-template-columns: minmax(0, 1fr) 340px;
      gap: 28px;
    }
    @media (max-width: 960px) {
      .project-grid { grid-template-columns: 1fr; }
      .project-grid aside { order: 2; }
    }

    .project-hero .hero-img img {
      border-radius: var(--radius);
      object-fit: cover;
      width: 100%;
      height: auto;
      display: block;
      border: 1px solid var(--line);
      box-shadow: var(--shadow);
    }

    /* Avatar styles must target both <img.avatar> and <picture><img> cases */
    .testimonial .avatar,
    .testimonial .avatar img {
      width: 64px;
      height: 64px;
      border-radius: 50%;
      object-fit: cover;
      border: 1px solid var(--line);
      display: block;
    }
    .testimonial .avatar{
      border-radius:50%;
    }
    .testimonial {
      display: grid;
      grid-template-columns: 64px 1fr;
      gap: 14px;
      align-items: start;
    }
    .testimonial blockquote {
      margin: 0;
      font-size: 1.02rem;
      line-height: 1.55;
    }
    .testimonial footer {
      margin-top: 8px;
      color: var(--muted, #555);
      font-size: .95rem;
    }
    .stars {
      display: inline-flex; gap: 2px; margin-left: 8px; font-size: .95rem;
    }
    .stars .on { opacity: 1; }
    .stars .off { opacity: .25; }
  </style>

  <div class="wrap project">
    <!-- Breadcrumbs -->
    <nav class="crumbs" aria-label="breadcrumbs">
      <a href="/">Home</a> &nbsp;/&nbsp; <a href="/#projects">Projects</a> &nbsp;/&nbsp; {title}
    </nav>

    <!-- HERO -->
    <section class="hero project-hero">
      <div>
        <div class="eyebrow">{eyebrow}</div>
        <h1 class="title">{title}</h1>
        {summary ? <p class="lede">{summary}</p> : null}

        <div class="meta" aria-label="Project meta">
          {client ? <span class="chip">Client: {client}</span> : null}
          {year ? <span class="chip">Year: {year}</span> : null}
          {isDesign ? <span class="chip">Format: 8.5√ó11 in</span> : null}
        </div>

        {links?.live ? (
          <div class="links">
            <a class="btn" href={links.live} target="_blank" rel="noreferrer">View Live</a>
          </div>
        ) : null}
      </div>

      {heroUrl ? (
        <figure class="hero-img">
          {/* Add width/height if you know them for perfect CLS */}
          <Img src={heroUrl} alt={title + " hero image"} loading="eager" class="w-full" />
        </figure>
      ) : null}
    </section>

    <!-- TWO-COLUMN GRID -->
    <section class="project-grid" aria-label="Project content">
      <!-- LEFT COLUMN: MDX body + Client Comments + (optional) Flyer -->
      <div>
        <article class="card">
          <Content />
        </article>

        {testimonial?.quote ? (
          <article class="card">
            <h2>Client Comments</h2>
            <div class="testimonial">
              {testimonialPhotoUrl ? (
                <Img
                  class="avatar"
                  src={testimonialPhotoUrl}
                  alt={(testimonial.name ?? "Client") + " ‚Äî photo"}
                  width={64}
                  height={64}
                  loading="lazy"
                  decoding="async"
                />
              ) : (
                <div class="avatar" style="display:flex;align-items:center;justify-content:center;background:#f2f2f2;">üë§</div>
              )}
              <div>
                <blockquote>‚Äú{testimonial.quote}‚Äù</blockquote>
                <footer>
                  <strong>{testimonial.name ?? "Client"}</strong>
                  {testimonial.title ? <> ‚Äî {testimonial.title}</> : null}
                  {typeof testimonial.rating === "number" ? (
                    <span class="stars" aria-label={`Rating ${testimonial.rating} out of 5`}>
                      {Array.from({ length: 5 }).map((_, i) => (
                        <span class={i < (testimonial.rating as number) ? "on" : "off"}>‚òÖ</span>
                      ))}
                    </span>
                  ) : null}
                </footer>
              </div>
            </div>
          </article>
        ) : null}

        {isDesign && heroUrl ? (
          <article class="card">
            <h2>Full Flyer</h2>
            <div class="flyer-viewport" aria-label="Letter-size flyer preview">
              <Img src={heroUrl} alt={title + " ‚Äî full flyer"} loading="lazy" class="w-full" />
            </div>
          </article>
        ) : null}
      </div>

      <!-- RIGHT SIDEBAR -->
      <aside>
        {services.length ? (
          <div class="card">
            <h2>Services</h2>
            <ul class="list">
              {services.map((s) => <li>{s}</li>)}
            </ul>
          </div>
        ) : null}

        {tech.length ? (
          <div class="card">
            <h2>Tech</h2>
            <ul class="list">
              {tech.map((x) => <li>{x}</li>)}
            </ul>
          </div>
        ) : null}

        {tags.length ? (
          <div class="card">
            <h2>Tags</h2>
            <div class="meta" style="padding:10px">
              {tags.map((tag) => <span class="chip">{tag}</span>)}
            </div>
          </div>
        ) : null}

        {metrics.length ? (
          <div class="card">
            <h2>Outcomes</h2>
            <ul class="list outcomes-list">
              {metrics.map((m) => <li>{m}</li>)}
            </ul>
          </div>
        ) : null}
      </aside>
    </section>

    <!-- Modal for gallery (global CSS supplies styles) -->
    <div id="gallery-modal" class="gallery-modal" hidden aria-hidden="true" role="dialog" aria-label="Image preview">
      <button class="close" aria-label="Close preview">&times;</button>
      <img id="gallery-modal-img" alt="" />
    </div>

    <!-- Bottom nav -->
    <div class="bottom-nav">
      <a href="/#projects">‚Üê Back to Projects</a>
      <a href="/contact">Start a project ‚Üí</a>
    </div>
  </div>

  <!-- Inline, page-safe script for gallery modal -->
  <script is:inline>
    (function () {
      var gallery = document.querySelector('.case-gallery-castle');
      var modal = document.getElementById('gallery-modal');
      var modalImg = document.getElementById('gallery-modal-img');
      var closeBtn = modal ? modal.querySelector('.close') : null;

      if (!gallery || !modal || !modalImg || !closeBtn) return;

      function openModal(src, alt) {
        modalImg.src = src;
        modalImg.alt = alt || '';
        modal.removeAttribute('hidden');
        modal.setAttribute('aria-hidden', 'false');
        document.body.style.overflow = 'hidden';
        closeBtn.focus();
      }

      function closeModal() {
        modal.setAttribute('hidden', '');
        modal.setAttribute('aria-hidden', 'true');
        modalImg.src = '';
        modalImg.alt = '';
        document.body.style.overflow = '';
      }

      gallery.addEventListener('click', function (e) {
        var img = e.target && e.target.closest && e.target.closest('img');
        if (!img) return;
        var full = img.getAttribute('data-full') || img.src;
        openModal(full, img.alt);
      });

      closeBtn.addEventListener('click', closeModal);
      modal.addEventListener('click', function (e) {
        if (e.target === modal) closeModal();
      });
      document.addEventListener('keydown', function (e) {
        if (e.key === 'Escape' && modal.getAttribute('aria-hidden') === 'false') closeModal();
      });
    })();
  </script>
</Base>

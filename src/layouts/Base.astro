---
import "../styles/global.css";

/**
 * Props you can pass from any page:
 *
 * title?: string
 * description?: string
 * image?: string            // absolute or /relative path; used for OG/Twitter
 * noindex?: boolean         // set true to add noindex on pages you want excluded
 * breadcrumbs?: Array<{ name: string; url?: string }>
 * structuredData?: any[]    // extra JSON-LD blocks to inject (e.g., per-project CreativeWork)
 */
const {
  title = "Matt — Full-Stack Shopify & Web Developer",
  description = "Custom Shopify 2.0 themes, Liquid, performance, integrations, and full-stack web builds.",
  image = "/images/og-default.jpg",
  noindex = false,
  breadcrumbs = [],
  structuredData = [],
} = Astro.props;

// Site + canonical helpers
const siteOrigin = Astro.site ? (Astro.site as URL).origin : "https://mattblethen.com";
const canonical = siteOrigin + Astro.url.pathname;

// Normalize OG image to absolute
const ogImage = (typeof image === "string" && image.startsWith("http")) ? image : (siteOrigin + image);

// Default breadcrumbs: Home > Current Page
const crumbList =
  breadcrumbs.length
    ? breadcrumbs
    : [
        { name: "Home", url: siteOrigin + "/" },
        { name: title, url: canonical },
      ];

// Build BreadcrumbList JSON-LD
const breadcrumbJsonLd = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: crumbList.map((c: { name: string; url?: string }, i: number) => ({

    "@type": "ListItem",
    position: i + 1,
    name: c.name,
    ...(c.url ? { item: c.url } : {}),
  })),
};

// Site-level WebSite JSON-LD (+ SearchAction target your search route if/when present)
const websiteJsonLd = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  name: "Matt Blethen — Shopify & Web Developer",
  url: siteOrigin,
  potentialAction: {
    "@type": "SearchAction",
    target: `${siteOrigin}/search?q={search_term_string}`,
    "query-input": "required name=search_term_string",
  },
};

// Business JSON-LD: nationwide remote + Central KY local relevance
const professionalServiceJsonLd = {
  "@context": "https://schema.org",
  "@type": "ProfessionalService",
  name: "Matt Blethen — Shopify & Web Developer",
  url: siteOrigin,
  image: siteOrigin + "/images/profile.png",
  description:
    "Nationwide remote Shopify development and web design, with local availability in Richmond, Lexington, and Central Kentucky.",
  serviceArea: { "@type": "Country", name: "United States" },
  areaServed: [
    "Richmond, KY",
    "Lexington, KY",
    "Berea, KY",
    "Winchester, KY",
    "Nicholasville, KY",
    "Georgetown, KY",
    "Versailles, KY",
    "Danville, KY",
    "Lancaster, KY",
    "Irvine, KY",
  ].map((c) => ({ "@type": "City", name: c })),
  address: {
    "@type": "PostalAddress",
    addressLocality: "Richmond",
    addressRegion: "KY",
    addressCountry: "US",
  },
  sameAs: [],
};

// Allow page-level schema injection (e.g., CreativeWork on project pages)
const jsonLdBlocks = [websiteJsonLd, professionalServiceJsonLd, breadcrumbJsonLd, ...structuredData];
---
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>{title}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content={description} />
    {noindex ? <meta name="robots" content="noindex, follow" /> : <meta name="robots" content="index, follow" />}
    <link rel="canonical" href={canonical} />

    <!-- Social / Open Graph -->
    <meta property="og:site_name" content="Matt Blethen — Shopify & Web Developer" />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonical} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={ogImage} />

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={ogImage} />

    <!-- Theming -->
    <meta name="theme-color" content="#ffffff" media="(prefers-color-scheme: light)" />
    <meta name="theme-color" content="#0b0f14" media="(prefers-color-scheme: dark)" />

    <!-- Icons (adjust paths if you keep favicons elsewhere) -->
    <link rel="icon" href="/favicon.ico" sizes="any" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/site.webmanifest" />

    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700;800&display=swap"
      rel="stylesheet"
    />

    <!-- Default JSON-LD (site / business / breadcrumbs) + page-level injections -->
    {jsonLdBlocks.map((obj) => (
      <script type="application/ld+json" set:html={JSON.stringify(obj)}></script>
    ))}

    <!-- Allow pages to push extra tags into <head> -->
    <slot name="head" />

    <style>
      /* Prevent any horizontal scroll issues */
      html, body { overflow-x: hidden; }

      /* Header */
      header.site-header {
        position: sticky; top: 0;
        background: rgba(255,255,255,0.9);
        -webkit-backdrop-filter: saturate(130%) blur(8px);
        backdrop-filter: saturate(130%) blur(8px);
        border-bottom: 1px solid var(--line);
        z-index: 100;
        width: 100%;
      }
      .site-header .wrap {
        display: flex;
        align-items: center;
        justify-content: space-between;
        min-height: 64px;
        gap: 16px;
      }
      .brand { font-weight: 800; letter-spacing: .2px; white-space: nowrap; }

      /* Primary nav */
      .primary-nav {
        display: flex;
        align-items: center;
        gap: 14px;
      }
      .menu-toggle {
        display: none;
        background: transparent;
        border: 1px solid var(--line);
        border-radius: 10px;
        padding: 8px 10px;
        line-height: 0;
      }
      .menu-toggle svg { width: 22px; height: 22px; }

      .nav-list {
        display: flex;
        gap: 20px;
        list-style: none;
        padding: 0;
        margin: 0;
      }
      .nav-list a { color: var(--text); text-decoration: none; }

      /* Mobile menu */
      @media (max-width: 860px) {
        .menu-toggle { display: inline-flex; }
        .nav-list {
          position: fixed;
          top: 64px; /* below header */
          left: 0; right: 0;
          display: none;
          flex-direction: column;
          gap: 0;
          background: #fff;
          border-bottom: 1px solid var(--line);
          z-index: 90;
        }
        .nav-list.open { display: flex; }
        .nav-list li { border-top: 1px solid var(--line); }
        .nav-list li:first-child { border-top: 0; }
        .nav-list a { display: block; padding: 14px 20px; }
      }

      /* Footer */
      footer.site-footer {
        border-top: 1px solid var(--line);
        width: 100%;
      }
      .site-footer .wrap {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 16px;
        min-height: 72px;
        flex-wrap: wrap; /* allow wrapping so it never overflows */
      }
      .foot-links {
        display: flex;
        gap: 16px;
        flex-wrap: wrap;
      }
      @media (max-width: 720px) {
        .site-footer .wrap {
          flex-direction: column;
          align-items: flex-start;
          padding-top: 16px;
          padding-bottom: 16px;
        }
      }
    </style>
  </head>
  <body>
    <!-- Shared Header / Nav -->
    <header class="site-header">
      <div class="wrap">
        <a class="brand" href="/">Matt Blethen</a>

        <nav class="primary-nav" aria-label="Primary">
          <button
            class="menu-toggle"
            aria-label="Toggle menu"
            aria-expanded="false"
            aria-controls="primary-menu"
          >
            <!-- Hamburger / Close icon (CSS swaps via [aria-expanded]) -->
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                 stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
              <line x1="3" y1="6" x2="21" y2="6"></line>
              <line x1="3" y1="12" x2="21" y2="12"></line>
              <line x1="3" y1="18" x2="21" y2="18"></line>
            </svg>
          </button>

          <ul id="primary-menu" class="nav-list">
            <li><a href="/#projects">Projects</a></li>
            <li><a href="/#services">Services</a></li>
            <li><a href="/contact">Contact</a></li>
          </ul>
        </nav>
      </div>
    </header>

    <!-- Page content -->
    <slot />

    <!-- Shared Footer -->
    <footer class="site-footer">
      <div class="wrap">
        <p>© {new Date().getFullYear()} Matt Blethen</p>
        <div class="foot-links">
          <a href="mailto:mattblethen@gmail.com">mattblethen@gmail.com</a>
        </div>
      </div>
    </footer>

    <script is:inline>
      // Simple, accessible mobile nav toggle
      (function () {
        const btn = document.querySelector('.menu-toggle');
        const list = document.getElementById('primary-menu');
        if (!btn || !list) return;

        function closeOnOutsideClick(e) {
          if (!list.contains(e.target) && !btn.contains(e.target)) {
            list.classList.remove('open');
            btn.setAttribute('aria-expanded', 'false');
            document.removeEventListener('click', closeOnOutsideClick);
          }
        }

        btn.addEventListener('click', () => {
          const open = list.classList.toggle('open');
          btn.setAttribute('aria-expanded', open ? 'true' : 'false');
          if (open) {
            // Close when clicking outside
            setTimeout(() => document.addEventListener('click', closeOnOutsideClick), 0);
          }
        });

        // Close on Esc
        document.addEventListener('keydown', (e) => {
          if (e.key === 'Escape' && list.classList.contains('open')) {
            list.classList.remove('open');
            btn.setAttribute('aria-expanded', 'false');
          }
        });
      })();
    </script>
  </body>
</html>
